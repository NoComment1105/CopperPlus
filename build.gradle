//file:noinspection GradlePackageVersionRange
plugins {
	alias(libs.plugins.quilt.loom)
	alias(libs.plugins.quilt.licenser)
	id 'maven-publish'
}

def targetJavaVersion = 17

group = project.maven_group
version = "$project.version+${libs.versions.minecraft.get()}"
archivesBaseName = project.archives_base_name

repositories {
	maven {
		name = 'Modrinth'
		url = uri('https://api.modrinth.com/maven')
		content {
			includeGroup 'maven.modrinth'
		}
	}

	maven {
		name = 'Terraformers'
		url = uri('https://maven.terraformersmc.com/releases/')
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft(libs.minecraft)
	mappings(loom.layered {
		addLayer quiltMappings.mappings( "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:v2" )
	})

	modImplementation(libs.quilt.loader)

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation(libs.quilted.fabric.api)

	// Mods to aid development speed
	modRuntimeOnly("maven.modrinth:gvQqBUqZ:${libs.versions.lithium.get()}") // Lithium
	modRuntimeOnly("maven.modrinth:hvFnDODi:${libs.versions.lazydfu.get()}") // LazyDFU

	modImplementation("com.terraformersmc:modmenu:${libs.versions.modmenu.get()}") {
		transitive(false)
	}
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()

	// If this mod is going to be a library, its better to generate javadocs too, uncomment this line to generate them
	// withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding('UTF-8')
	it.options.deprecation(true)
	it.options.incremental(true)
	it.options.release.set(targetJavaVersion)
}

jar {
	from('LICENSE') {
		rename { "${it}_${archivesBaseName}"}
	}
}

license {
	rule file('HEADER')
	include '**/*.java'
}

processResources {
	inputs.property 'version', version
	inputs.property 'maven_group', maven_group

	filesMatching('quilt.mod.json') {
		expand(
				'version': version,
				'maven_group': maven_group,
		)
	}
}


// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		 //mavenLocal() // Publish to the local maven
	}
}

runClient {
	// Export mixin altered classes to the build output folder and set memory limit
	jvmArgs('-Dmixin.debug.export=true', '-Xmx1536m')
}

quiltflower {
	addToRuntimeClasspath.set(true)
}
