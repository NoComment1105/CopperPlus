//file:noinspection GradlePackageVersionRange
plugins {
	id 'org.quiltmc.loom' version '0.12.+'
	id 'org.quiltmc.gradle.licenser' version '1.+'
	id 'maven-publish'
}

def targetJavaVersion = 17

group = project.maven_group
version = "$project.version+$project.minecraft_version"
archivesBaseName = project.archives_base_name

repositories {
	maven {
		name = 'Modrinth'
		url = uri('https://api.modrinth.com/maven')
		content {
			includeGroup 'maven.modrinth'
		}
	}

	maven {
		name = 'Terraformers'
		url = uri('https://maven.terraformersmc.com/releases/')
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft("com.mojang:minecraft:$minecraft_version")
	mappings( loom.layered {
		addLayer quiltMappings.mappings( "org.quiltmc:quilt-mappings:$minecraft_version+build.$quilt_mappings:v2" )
//		addLayer loom.officialMojangMappings() // uncomment if you want mojmap too
	})
	modImplementation("org.quiltmc:quilt-loader:$loader_version")

	modImplementation("org.quiltmc:qsl:$qsl_version")

	// QSL is not a complete API; you need Quilted Fabric API to fill in the gaps.
	modImplementation("org.quiltmc.quilted-fabric-api:quilted-fabric-api:$quilted_fapi_version-$minecraft_version")

	// Mods to aid development speed
	modImplementation('maven.modrinth:lithium:mc1.18.2-0.7.9')
	modImplementation('maven.modrinth:lazydfu:0.1.2')

	modImplementation("com.terraformersmc:modmenu:$modmenu_version") {
		transitive(false)
	}
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()

	// If this mod is going to be a library, its better to generate javadocs too, uncomment this line to generate them
	// withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding('UTF-8')
	it.options.deprecation(true)
	it.options.incremental(true)

	it.sourceCompatibility = targetJavaVersion // for the IDE support
	it.targetCompatibility = targetJavaVersion
	it.options.release.set(targetJavaVersion)
}

jar {
	from('LICENSE') {
		rename { "${it}_$archivesBaseName"}
	}
}

license {
	rule file('HEADER')
	include '**/*.java'
}

processResources {
	inputs.property 'version', version
	inputs.property 'maven_group', maven_group
	inputs.property 'loader_version', loader_version
	inputs.property 'minecraft_version', minecraft_version

	filesMatching('quilt.mod.json') {
		expand([
				'version': version,
				'maven_group': maven_group,
				'loader_version': loader_version,
				'minecraft_version': minecraft_version,
				'quilted_fabric_api_version': quilted_fapi_version
		])
	}
}


// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			group 'io.github.nocomment1105'
			from components.java
		}
	}

	repositories {
		 mavenLocal() // Publish to the local maven
	}
}

runClient {
	// Export mixin altered classes to the build output folder and set memory limit
	jvmArgs('-Dmixin.debug.export=true', '-Xmx1536m')
}
